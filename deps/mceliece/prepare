#!/bin/bash
set -e

# Extract the reference implementation.
archive=mceliece-20190331
tar -xf $archive.tar.gz $archive/Reference_Implementation/kem/ --strip-components=2

prepare_algorithm() {
  add_header $1
  add_gyp $1
}

add_header() {
  id=$1

  (
    cat kem/$id/crypto_kem_$id.h
    echo '#ifdef __cplusplus'
    echo 'extern "C" {'
    echo '#endif'
    echo '#undef rng_h'
    echo '#undef RNG_SUCCESS'
    echo '#undef RNG_BAD_MAXLEN'
    echo '#undef RNG_BAD_OUTBUF'
    echo '#undef RNG_BAD_REQ_LEN'
    echo "#define AES_XOF_struct pqcrypto_kem_${id}_impl_priv_AES_XOF_struct"
    echo "#define AES256_CTR_DRBG_struct pqcrypto_kem_${id}_impl_priv_AES256_CTR_DRBG_struct"
    echo "#define AES256_CTR_DRBG_Update pqcrypto_kem_${id}_impl_priv_AES256_CTR_DRBG_Update"
    echo "#define seedexpander_init pqcrypto_kem_${id}_impl_priv_seedexpander_init"
    echo "#define seedexpander pqcrypto_kem_${id}_impl_priv_seedexpander"
    echo "#define randombytes_init pqcrypto_kem_${id}_impl_priv_randombytes_init"
    echo "#define randombytes pqcrypto_kem_${id}_impl_priv_randombytes"
    cat kem/$id/nist/rng.h
    echo "#undef AES_XOF_struct"
    echo "#undef AES256_CTR_DRBG_struct"
    echo "#undef AES256_CTR_DRBG_Update"
    echo "#undef seedexpander_init"
    echo "#undef seedexpander"
    echo "#undef randombytes_init"
    echo "#undef randombytes"
    echo '#ifdef __cplusplus'
    echo '}'
    echo '#endif'
  ) >> mceliece.h
}

add_gyp() {
  id=$1

  variables=("apply_benes=pqcrypto_kem_${id}_impl_priv_apply_benes" "bitrev=pqcrypto_kem_${id}_impl_priv_bitrev" "bm=pqcrypto_kem_${id}_impl_priv_bm" "controlbits=pqcrypto_kem_${id}_impl_priv_controlbits" "decrypt=pqcrypto_kem_${id}_impl_priv_decrypt" "encrypt=pqcrypto_kem_${id}_impl_priv_encrypt" "eval=pqcrypto_kem_${id}_impl_priv_eval" "gf_add=pqcrypto_kem_${id}_impl_priv_gf_add" "gf_frac=pqcrypto_kem_${id}_impl_priv_gf_frac" "gf_inv=pqcrypto_kem_${id}_impl_priv_gf_inv" "gf_iszero=pqcrypto_kem_${id}_impl_priv_gf_iszero" "gf_mul=pqcrypto_kem_${id}_impl_priv_gf_mul" "GF_mul=pqcrypto_kem_${id}_impl_priv_GF_mul" "load2=pqcrypto_kem_${id}_impl_priv_load2" "load8=pqcrypto_kem_${id}_impl_priv_load8" "perm_conversion=pqcrypto_kem_${id}_impl_priv_perm_conversion" "pk_gen=pqcrypto_kem_${id}_impl_priv_pk_gen" "root=pqcrypto_kem_${id}_impl_priv_root" "sk_part_gen=pqcrypto_kem_${id}_impl_priv_sk_part_gen" "sort_63b=pqcrypto_kem_${id}_impl_priv_sort_63b" "store2=pqcrypto_kem_${id}_impl_priv_store2" "store8=pqcrypto_kem_${id}_impl_priv_store8" "support_gen=pqcrypto_kem_${id}_impl_priv_support_gen" "synd=pqcrypto_kem_${id}_impl_priv_synd" "syndrome=pqcrypto_kem_${id}_impl_priv_syndrome" "transpose_64x64=pqcrypto_kem_${id}_impl_priv_transpose_64x64" "aes256ctr=pqcrypto_kem_${id}_impl_priv_aes256ctr" "load4=pqcrypto_kem_${id}_impl_priv_load4" "AES256_CTR_DRBG_Update=pqcrypto_kem_${id}_impl_priv_AES256_CTR_DRBG_Update" "seedexpander=pqcrypto_kem_${id}_impl_priv_seedexpander" "handleErrors=pqcrypto_kem_${id}_impl_priv_handleErrors" "randombytes=pqcrypto_kem_${id}_impl_priv_randombytes" "randombytes_init=pqcrypto_kem_${id}_impl_priv_randombytes_init" "seedexpander_init=pqcrypto_kem_${id}_impl_priv_seedexpander_init" "perm_check=pqcrypto_kem_${id}_impl_priv_perm_check" "AES256_ECB=pqcrypto_kem_${id}_impl_priv_AES256_ECB" "genpoly_gen=pqcrypto_kem_${id}_impl_priv_genpoly_gen")

  (
    echo "    {"
    echo "      'target_name': 'only_$id',"
    echo "      'type': 'static_library',"
    echo "      'include_dirs': ['../KeccakCodePackage/bin/generic64'],"
    echo "      'sources': ["
    find kem/$id/ -type f -name '*.c' | grep -v 'nist/kat_kem.c' | while read source; do
      echo "        '$source',"
    done
    echo "      ],"
    echo "      'defines': ["
    for def in ${variables[@]}; do
      echo "        '$def',"
    done
    echo "      ],"
    echo "      'cflags': ['-fPIC']"
    echo "    },"
  ) >> binding.gyp
}

rm -f mceliece.h

implementations=`ls -1 kem | while read id; do if [ -d "kem/$id" ]; then echo $id; fi; done`
(
  echo "{"
  echo "  'targets': ["
  echo "    {"
  echo "      'target_name': 'mceliece',"
  echo "      'type': 'static_library',"
  echo "      'dependencies': ["
  for impl in $implementations; do
    echo "        'only_$impl',"
  done
  echo "      ]"
  echo "    },"
) > binding.gyp

for id in $implementations; do
  prepare_algorithm $id
done

(
  echo "  ]"
  echo "}"
) >> binding.gyp
